version: "3"
services:
  # postgres:
  #   container_name: postgres
  #   image: postgres
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: password
  keycloak:
    image: jboss/keycloak:12.0.1
    container_name: keycloak-sso
    depends_on:
      - postgres
    ports:
      - 18080:8080
    environment:
      KEYCLOAK_USER: keyadmin
      KEYCLOAK_PASSWORD: keypassword
      KEYCLOAK_IMPORT: "/tmp/keycloak-realm.json"
      KEYCLOAK_FRONTEND_URL: http://host.docker.internal:18080/auth
    volumes: 
      - "./config/keycloak-realm.json:/tmp/keycloak-realm.json"      
  registry:
    container_name: registry
    image: quay.io/apicurio/apicurio-registry-mem:2.0.1.Final
    restart: always
    ports:
      - 8081:8080
    environment:
      AUTH_ENABLED: 'true'
      KEYCLOAK_URL: http://host.docker.internal:18080/auth
      KEYCLOAK_REALM: registry
  zookeeper:
    container_name: zookeeper
    image: quay.io/strimzi/kafka:0.25.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
  kafka:
    container_name: kafka
    image: quay.io/strimzi/kafka:0.25.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181